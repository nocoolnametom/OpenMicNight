Subreddit:
  actAs:
    Timestampable: ~
  columns:
    name: { type: string(255), notnull: true }
    domain: { type: string(127), notnull: true }
    is_active: { type: boolean, default: 0 }
    create_new_episodes_cron_formatted: { type: string(32), notnull: true }
    episode_schedule_cron_formatted: { type: string(32), notnull: true }
    creation_interval: { type: integer, notnull: true, default: 0 }
    bucket_name: { type: string(64) }
    pending_users_are_full_members: { type: boolean, default: 1 }
  indexes:
    name: { fields: [name], type: unique}
    domain: { fields: [domain], type: unique}
    bucketName: { fields: [bucket_name], type: unique}

SubredditTropoNumber:
  actAs:
    Timestampable: ~
  columns:
    subreddit_id:  { type: integer, notnull: true }
    number: { type: text(255), notnull: true }
  relations:
    Subreddit: { onDelete: CASCADE, local: subreddit_id, foreign: id, foreignAlias: TropoNumbers }

AuthorType:
  actAs:
    Timestampable: ~
  columns:
    type: { type: string(255), notnull: true }
    description: { type: string(127) }

Validation:
  options:
    symfony:
      form: false
      filter: false
  columns:
    reddit_key: { type: string(127), notnull: true }
    username: { type: string(127), notnull: true }
  indexes:
    reddit_key: { fields: [reddit_key, username], type: unique}

ValidationPost:
  actAs:
    Timestampable: ~
  columns:
    post_address: { type: string(255), notnull: true }
    is_active: { type: boolean, notnull: true, default: false }

EmailType:
  actAs:
    Timestampable: ~
  columns:
    type: { type: string(255), notnull: true }
    description: { type: string(127) }

Email:
  actAs:
    Timestampable: ~
  columns:
    email_type_id: { type: integer, notnull: true }
    language: { type: string(31), notnull: true, default: 'en' }
    subject: { type: string(255), notnull: true}
    body_text_html: { type: string(4000) }
    body_text: { type: string(4000) }
  relations:
    EmailType: { onDelete: CASCADE, local: email_type_id, foreign: id, foreignAlias: Emails }

Membership:
  actAs:
    Timestampable: ~
  columns:
    type: { type: string(255), notnull: true }
    description: { type: string(127) }

Deadline:
  actAs:
    Timestampable: ~
  columns:
    author_type_id: { type: integer, notnull: true }
    subreddit_id: { type: integer, notnull: true }
    seconds: { type: integer, notnull = true }
    restricted_until_previous_misses_deadline: { type: boolean, default: 0 }
  relations:
    AuthorType: { onDelete: CASCADE, local: author_type_id, foreign: id, foreignAlias: Deadlines }
    Subreddit: { onDelete: CASCADE, local: subreddit_id, foreign: id, foreignAlias: Deadlines }
  indexes:
    oneOfEachAuthorTypePerSubreddit: { fields: [author_type_id, subreddit_id], type: unique }

Message:
  actAs:
    Timestampable: ~
  columns:
    recipient_id: { type: integer, notnull: true }
    sender_id: { type: integer }
    previous_message_id: { type: integer }
    text: { type: string(4000) }
  relations:
    sfGuardUser: { onDelete: CASCADE, local: recipient_id, foreign: id, foreignAlias: ReceivedMessages }
    sfGuardUser: { onDelete: CASCADE, local: sender_id, foreign: id, foreignAlias: SentMessages }
    Message: { onDelete: SET NULL, local: previous_message_id, foreign: id, foreignAlias: Replies }

sfGuardUserSubredditMembership:
  actAs:
    Timestampable: ~
  columns:
    sf_guard_user_id: { type: integer, notnull: true }
    subreddit_id: { type: integer, notnull: true }
    membership_id: { type: integer, notnull: true }
    display_membership: { type: boolean, default: 0 }
  relations:
    sfGuardUser: { onDelete: CASCADE, local: sf_guard_user_id, foreign: id, foreignAlias: SubredditMemberships }
    Subreddit: { onDelete: CASCADE, local: subreddit_id, foreign: id, foreignAlias: sfGuardUserMemberships }
    Membership: { onDelete: CASCADE, local: membership_id, foreign: id, foreignAlias: SubredditsfGuardUsers }
  indexes:
    oneUserMembershipPerSubreddit: { fields: [sf_guard_user_id, subreddit_id], type: unique}

Episode:
  actAs:
    Timestampable: ~
  columns:
    episode_assignment_id: { type: integer, default: null }
    subreddit_id: { type: integer, notnull: true }
    approved_by: { type: integer, default: null }
    release_date: { type: timestamp, notnull: true }
    audio_file: { type: string(255) }
    nice_filename: { type: string(255) }
    graphic_file: { type: string(255) }
    is_nsfw: { type: boolean, default: 0 }
    title: { type: string(255) }
    description: { type: string(4000) }
    is_submitted: { type: boolean, default: 0 }
    submitted_at: { type: timestamp }
    is_approved: { type: boolean, default: 0 }
    approved_at: { type: timestamp }
    file_is_remote: { type: boolean, default: 0 }
    remote_url: { type: string(255) }
    reddit_post_url: { type: string(255) }
  relations:
    sfGuardUser: { onDelete: SET NULL, local: sf_guard_user_id, foreign: id, foreignAlias: SubmittedEpisodes }
    sfGuardUser: { onDelete: SET NULL, local: approved_by, foreign: id, foreignAlias: ApprovedEpisodes }
    Subreddit: { onDelete: CASCADE, local: subreddit_id, foreign: id, foreignAlias: Episodes }
    EpisodeAssignment: { onDelete: CASCADE, local: episode_assignment_id, foreign: id, foreignAlias: Episodes }

EpisodeAssignment:
  actAs:
    Timestampable: ~
  columns:
    author_type_id: { type: integer, notnull: true }
    sf_guard_user_id: { type: integer, notnull: true }
    episode_id: { type: integer, notnull: true }
    id_hash: { type: string(255), notnull: true }
    missed_deadline: { type: boolean, default: 0 }
  relations:
    AuthorType: { onDelete: CASCADE, local: author_type_id, foreign: id, foreignAlias: EpisodeAssignments }
    sfGuardUser: { onDelete: CASCADE, local: sf_guard_user_id, foreign: id, foreignAlias: EpisodeAssignments }
    Episode: { onDelete: CASCADE, local: episode_id, foreign: id, foreignAlias: EpisodeAssignments }
  indexes:
    id_hash: { fields: [id_hash], type: unique}
#    noMultipleUserAssignmentsPerEpisode: { fields: [sf_guard_user_id, episode_id], type: unique }
#    noMultipleAuthorTypeAssignmentsPerEpisode: { fields: [author_type_id, episode_id], type: unique }

Session:
  options:
    symfony:
      form: false
      filter: false
  columns:
    sess_id: { type: string(32), primary: true, notnull: true }
    sess_data: { type: string(4000), notnull: true }
    sess_time: { type: integer(4), notnull: true }

ApiKey:
  actAs:
    Timestampable: ~
  columns:
    api_key: { type: string(255), notnull: true }
    shared_secret: { type: string(255), notnull: true }
    api_app_name: { type: string(255), notnull: true }
    developer_name: { type: string(255), notnull: true }
    developer_email: { type: string(255), notnull: true }
    is_active: { type: boolean, default: 1 }
  indexes:
    uniqueKeys: { fields: [api_key], type: unique }

sfGuardUserAuthKey:
  actAs:
    Timestampable: ~
  options:
    symfony:
      form: false
      filter: false
  columns:
    api_key_id: { type: integer, notnull: true }
    sf_guard_user_id: { type: integer, notnull: true }
    auth_key: { type: string(255), notnull: true }
    expires_at: { type: timestamp, notnull: true}
    is_revoked: { type: boolean, default: 0 }
  relations:
    sfGuardUser: { onDelete: CASCADE, local: sf_guard_user_id, foreign: id, foreignAlias: AuthKeys }
    ApiKey: { onDelete: CASCADE, local: api_key_id, foreign: id, foreignAlias: AuthKeys }

AuthFailure:
  actAs:
    Timestampable: ~
  options:
    symfony:
      form: false
      filter: false
  columns:
    api_key_id: { type: integer, notnull: true }
    sf_guard_user_id: { type: integer }
  relations:
    sfGuardUser: { onDelete: CASCADE, local: sf_guard_user_id, foreign: id, foreignAlias: AuthFailures }
    ApiKey: { onDelete: CASCADE, local: api_key_id, foreign: id, foreignAlias: AuthFailures }