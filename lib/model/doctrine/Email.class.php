<?php

/**
 * Email
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    OpenMicNight
 * @subpackage model
 * @author     Tom Doggett
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Email extends BaseEmail
{
    protected $app_name;
    protected $user;
    protected $name;

    protected function prepare($user_id)
    {
        $this->app_name = ProjectConfiguration::getApplicationName();
        $this->user = sfGuardUserTable::getInstance()->find($user_id);
        if (!$this->user)
            throw new sfException('Cannot find User identified by ' . $user_id);
        $this->name = ($this->user->getPreferredName() ?
                        $this->user->getPreferredName() : $this->user->getFullName());
    }

    public function generateBodyText($parameters, $html = true)
    {
        $this->prepare($paramaters['user_id']);

        if ($html) {
            $body = $this->getBodyTextHtml();
        } elseif ($this->getBodyText()) {
            $body = $this->getBodyText();
        } else {
            $body = $this->getBodyTextHtml();
            $body = preg_replace('~<br/?>~', "\n", $body);
            $body = strip_tags($body);
        }

        $pattern = '/~([a-z_\-]+)~/';
        preg_match_all($pattern, $body, $matches);
        foreach ($matches as $match) {
            $function = 'derive' . ucwords(str_replace('_', ' ', $match[1]));
            $replacement = $this->{$function}($parameters);
            $body = str_replace($match[0], $replacement, $body);
        }
        
        return $body;
    }
    
    public function generateSubject($parameters)
    {
        $this->prepare($paramaters['user_id']);

        $subject = $this->getSubject();

        $pattern = '/~([a-z_\-]+)~/';
        preg_match_all($pattern, $subject, $matches);
        foreach ($matches as $match) {
            $function = 'derive' . ucwords(str_replace('_', ' ', $match[1]));
            $replacement = $this->{$function}($parameters);
            $subject = str_replace($match[0], $replacement, $subject);
        }
        
        return $subject;
    }

    protected function deriveName($parameters)
    {
        return $this->name;
    }

    protected function deriveAppName($parameters)
    {
        return $this->app_name;
    }

    protected function deriveApiName($parameters)
    {
        $api_id = $parameters['api_id'];
        $api = ApiKeyTable::getInstance()->find($api_id);
        if (!$api)
            throw new sfException('Cannot find ApiKey identified by ' . $api_id);
        return $api->getApiAppName();
    }

    protected function deriveValidKey($parameters)
    {
        return $this->user->getRedditValidationKey();
    }

    protected function deriveSubredditName($parameters)
    {
        $episode_id = $parameters['episode_id'];
        $episode = EpisodeTable::getInstance()->find($episode_id);
        if (!$episode)
            throw new sfException('Cannot find Episode identified by ' . $episode_id);
        return $episode->getSubreddit()->getName();
    }

    protected function deriveRedditPost($parameters)
    {
        $reddit_post = sfConfig::get('app_email_reddit_validation_post_location');
        if (sfConfig::get('app_email_reddit_validation_local_file', false)) {
            $app_pattern = '/~([^~]+)~/';
            $app_location = preg_match($app_pattern, $reddit_post, $matches);
            $app_location = $app_location[1];
            $reddit_post = preg_replace($app_pattern,
                                        sfConfig::get($app_location),
                                                      $reddit_post);
        }
        return $reddit_post;
    }

    protected function deriveSenderUsername($parameters)
    {
        $message_id = $parameters['message_id'];
        $message = MessageTable::getInstance()->find($message_id);
        if (!$message)
            throw new sfException('Cannot find Message identified by ' . $message_id);
        $sender = sfGuardUserTable::getInstance()->find($message->getSenderId());
        return $sender->getUsername();
    }

    protected function deriveNewPassword($parameters)
    {
        return $parameter['new_password'];
    }

    protected function deriveMessageText($parameters)
    {
        $message_id = $parameters['message_id'];
        $message = MessageTable::getInstance()->find($message_id);
        if (!$message)
            throw new sfException('Cannot find Message identified by ' . $message_id);
        return $message->getText();
    }

    protected function deriveReleaseDate($parameters)
    {
        $episode_id = $parameters['episode_id'];
        $episode = EpisodeTable::getInstance()->find($episode_id);
        if (!$episode)
            throw new sfException('Cannot find Episode identified by ' . $episode_id);
        return $episode->getReleaseDate('l, F n, Y \a\t g:ia');
    }

    protected function deriveDeadlineDate($parameters)
    {
        $deadline = $parameters['deadline'];
        $deadline = strtotime($deadline);
        $deadline_date = date('l, F n, Y \a\t g:ia', $deadline);
    }

    protected function deriveFrontendRoute($parameters)
    {
        $authorization_key = $this->user->getEmailAuthorizationKey();

        $frontend_app_location = rtrim(ProjectConfiguration::getFrontendAppLocation(),
                                       '/');
        $frontendRouting = new sfPatternRouting(new sfEventDispatcher());

        $config = new sfRoutingConfigHandler();
        $routes = $config->evaluate(array(sfConfig::get('sf_apps_dir') . '/frontend/config/routing.yml'));

        $frontendRouting->setRoutes($routes);

        $frontend_route = $frontend_app_location . $frontendRouting
                        ->generate('sf_guard_verify',
                                   array(
                            'key' => $authorization_key,
                        ));
        return $frontend_route;
    }
    
    
}
