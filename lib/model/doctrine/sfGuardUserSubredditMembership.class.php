<?php

/**
 * sfGuardUserSubredditMembership
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    OpenMicNight
 * @subpackage model
 * @author     Tom Doggett
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUserSubredditMembership extends BasesfGuardUserSubredditMembership
{
    
    public function setIncremented($id)
    {
        $this->_id = array($id);
        $this->set('id', $id, false);
        $this->_lastModified = array();
    }

    /**
     * applies the changes made to this object into database
     * this method is smart enough to know if any changes are made
     * and whether to use INSERT or UPDATE statement
     *
     * this method also saves the related components
     * 
     * If the membrship that is made is a "blocked" membership, then the object
     * also initiates the process of removing all future assignments the user
     * has made in the membership's subreddit.
     * 
     * @see Doctrine_Record::save()
     *
     * @param Doctrine_Connection $conn     optional connection parameter
     * @throws Exception                    if record is not valid and validation is active
     * @return void
     */
    public function save(Doctrine_Connection $conn = null)
    {
        /* If we're establishing a blocked membership, then we need to remove
         * all future Episode assignments.
         */
        if ($this->getMembership()->getType() == 'blocked') {
            Doctrine::getTable('EpisodeAssignment')
                    ->deleteBySubredditIdAndUserId(
                            $this->getSubredditId(), $this->getSfGuardUserId()
            );
        }

        // Make sure that the user has been validated as a emmber of Reddit!
        if (!$this->getSfGuardUser()->getIsValidated())
            $this->deleteWithException("Cannot create Membership association "
                    . "because User " . $this->getSfGuardUser()->getUsername()
                    . " has not been validated yet.", 406);

        parent::save($conn);
    }

    /**
     * Deletes the current object and also throws and exception.
     * 
     * @throws sfException
     *
     * @param struing $message      The message for the exception
     * @param long $code            An error code for the exception
     * @param sfException $previous A previously thrown exception.
     */
    public function deleteWithException($message = null, $code = null, $previous = null)
    {
        $this->delete();
        throw new sfException($message, $code, $previous);
    }

    public function getFullName()
    {
        return $this->getSfGuardUser()->getFullName();
    }
}