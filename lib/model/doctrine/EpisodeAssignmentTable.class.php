<?php

/**
 * EpisodeAssignmentTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EpisodeAssignmentTable extends Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return object EpisodeAssignmentTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EpisodeAssignment');
    }
    
    public static function grabIdFromArray($value)
    {
        return (is_array($value) ? $value['id'] : null);
    }

    public function deleteBySubredditIdAndUserId($subreddit_id, $user_id)
    {

        $subreddit_id = (int) ($subreddit_id);
        $subquery = $this->createQuery()
                ->select('EpisodeAssignment.id')
                //->from('EpisodeAssignment')
                ->leftJoin('EpisodeAssignment.Episode Episode')
                ->where('Episode.release_date > NOW()')
                ->andWhere('Episode.subreddit_id = ?', $subreddit_id)
                ->andWhere('EpisodeAssignment.sf_guard_user_id = ?', $user_id)
                ->groupBy('EpisodeAssignment.id')
                ->fetchArray();
        $ids = array_map(array('EpisodeAssignmentTable', 'grabIdFromArray'), $subquery);
        $query = $this->createQuery()
                ->delete()
                ->from('EpisodeAssignment')
                ->whereIn('EpisodeAssignment.id', $ids);
        $query->execute();
    }

    public function getFirstByUserAuthorTypeAndSubreddit($author_type_id,
                                                         $user_id, $subreddit_id)
    {
        $episode_assignments = $this->createQuery()
                ->leftJoin('EpisodeAssignment.Episode Episode')
                ->where('EpisodeAssignment.author_type_id = ?', $author_type_id)
                ->andWhere('EpisodeAssignment.sf_guard_user_id = ?', $user_id)
                ->andWhere('Episode.subreddit_id = ?', $subreddit_id)
                ->andWhere('Episode.release_date > NOW()')
                ->orderBy('EpisodeAssignment.created_at ASC')
                ->execute()
                ->getFirst();
        return $episode_assignments;
    }

    public function getFirstByEpisodeAuthorTypeAndSubreddit($author_type_id,
                                                            $episode_id,
                                                            $subreddit_id)
    {
        $episode_assignments = $this->createQuery()
                ->leftJoin('EpisodeAssignment.Episode Episode')
                ->where('EpisodeAssignment.author_type_id = ?', $author_type_id)
                ->andWhere('EpisodeAssignment.episode_id = ?', $episode_id)
                ->andWhere('Episode.subreddit_id = ?', $subreddit_id)
                ->andWhere('Episode.release_date > NOW()')
                ->orderBy('EpisodeAssignment.created_at ASC')
                ->execute()
                ->getFirst();
        return $episode_assignments;
    }

}