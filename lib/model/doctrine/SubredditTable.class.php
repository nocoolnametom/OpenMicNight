<?php

/**
 * SubredditTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SubredditTable extends Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return object SubredditTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Subreddit');
    }

    /**
     * Pulls the 'subreddit_id' from a given sub-array.
     *
     * @param array $value  The sub-array from which to take the subreddit_id.
     * @return int          The subreddit_id contained in the sub-array.
     */
    public static function grabSubredditIdFromArray($value)
    {
        return (is_array($value) ? $value['subreddit_id'] : null);
    }

    /**
     * Check for all Subreddits that have an Episode with a release_date
     * beyond now plus the creation_interval.
     * 
     * This means that only when the release_dates all fall within the
     * creation_interval will the Subreddit not be returned.  
     *
     * @return array   Array of Subreddits that don't need generation
     */
    public function getSubredditsNotNeedingEpisodeGeneration()
    {
        $subquery = $this->createQuery()
                ->select('Episode.subreddit_id')
                ->from('Episode')
                ->leftJoin('Episode.Subreddit Subreddit')
                ->groupBy('Episode.subreddit_id')
                ->where('Episode.release_date > TIMESTAMPADD(SECOND, Subreddit.creation_interval, NOW())')
                ->fetchArray();
        $ids = array_map(array('SubredditTable', 'grabSubredditIdFromArray'),
                         $subquery);
        return $ids;
    }

    /**
     * Retrieves all Subreddits that are in need of generating new Episodes.
     * Checking against particular Subreddits can be done by giving the
     * Subreddit name as an argument (accepts SQL LIKE format).
     *
     * @param string $subreddit_name A given Subreddit name to check against.
     * @return array                 An array of Subreddits
     */
    public function getSubredditsNeedingEpisodeGeneration($subreddit_name = '%')
    {
        $ids = $this->getSubredditsNotNeedingEpisodeGeneration();
        $subreddits = $this->createQuery()
                ->where('Subreddit.name LIKE ?', $subreddit_name)
                ->whereNotIn('Subreddit.id', $ids)
                ->execute();

        return $subreddits;
    }

    /**
     * Retrieves the release date for the youngest Episode of the given 
     * Subreddit.
     *
     * @param int $subreddit_id  The incremented ID of a Subreddit object
     * @return string            The release date of the youngest Episode.
     */
    public function getLastEpisodeReleaseDate($subreddit_id)
    {
        $results = $this->createQuery()
                ->select('Episode.release_date')
                ->from('Episode')
                ->where('Episode.subreddit_id = ?', $subreddit_id)
                ->orderBy('Episode.release_date DESC')
                ->limit(1)
                ->fetchArray();
        return (count($results) ? $results[0]['release_date'] : date('Y-m-d H:i:s'));
    }

}