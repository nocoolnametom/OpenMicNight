<?php

/**
 * DeadlineTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DeadlineTable extends Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return object DeadlineTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Deadline');
    }

    /**
     * Returns whether a Deadline for a given Subreddit and AuthorType is
     * restricted until the previous AuthorType passes its Deadline.
     *
     * @param int $authortype_id The incremented ID of an AuthorType object
     * @param int $subreddit_id  The incremented ID of a Subreddit object
     * @return bool              Whether the Deadline record is restricted
     */
    public function getIfDeadlineRestrictedByAuthorTypeAndSubreddit($authortype_id,
                                                                       $subreddit_id)
    {
        $deadline_restricted = $this->createQuery()
                ->select('Deadline.restricted_until_previous_misses_deadline')
                ->where('Deadline.author_type_id = ?', $authortype_id)
                ->andWhere('Deadline.subreddit_id = ?', $subreddit_id)
                ->limit(1)
                ->fetchArray();

        return (count($deadline_restricted) ? $deadline_restricted[0]['restricted_until_previous_misses_deadline']
                            : false);
    }

    /**
     * Return the seconds of the Deadline identified by the given AuthorType and
     * Subreddit.
     *
     * @param int $author_type_id  The incremented ID of an AuthorType object
     * @param int $subreddit_id    The incremented ID of a Subreddit object
     * @return int                 The seconds for the returned Deadline
     */
    public function getSecondsByAuthorAndSubreddit($author_type_id,
                                                   $subreddit_id)
    {
        $seconds = $this->createQuery()
                ->select('Deadline.seconds')
                ->where('Deadline.author_type_id = ?', $author_type_id)
                ->andWhere('Deadline.subreddit_id = ?', $subreddit_id)
                ->limit(1)
                ->fetchArray();
        return (count($seconds) ? $seconds[0]['seconds'] : false);
    }

    /**
     * Returns the AuthorTypeId of the first AuthorType that has a Deadline
     * shorter than the given seconds.
     *
     * @param int $seconds      
     * @param int $subreddit_id The incremented ID of a Subreddit object
     * @return int  
     */
    public function getFirstAuthorTypeIdBySubredditWhereDeadlineIsGreaterThan($seconds,
                                                                              $subreddit_id)
    {
        $deadlines = $this->createQuery()
                ->select('Deadline.author_type_id')
                ->where('Deadline.subreddit_id = ?', $subreddit_id)
                ->andWhere('Deadline.seconds > ?', $seconds)
                ->orderBy('Deadline.seconds ASC')
                ->limit(1)
                ->fetchArray();
        return (count($deadlines) ? $deadlines[0]['author_type_id'] : null);
    }
    
    public function getDeadlinesForGivenSubreddits($subreddit_ids = array())
    {
        $deadlines = $this->createQuery()
                ->select('Deadline.subreddit_id, Deadline.author_type_id, Deadline.seconds')
                ->whereIn('Deadline.subreddit_id', $subreddit_ids)
                ->orderBy('Deadline.subreddit_id ASC, Deadline.seconds DESC')
                ->fetchArray();
        return $deadlines;
    }

}